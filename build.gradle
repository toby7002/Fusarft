plugins {
	id "fabric-loom" version "1.5-SNAPSHOT"
	id "maven-publish"
	id "org.jetbrains.kotlin.jvm" version "1.9.10"
	id "com.diffplug.spotless" version "6.22.0"
}

version = version_major + "." + version_minor + "." + version_patch
group = project.maven_group

loom {
	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { // Parchment
		url "https://maven.parchmentmc.org"
	}
	maven { // REI, Cloth Config
		url "https://maven.shedaniel.me"
	}
	maven { // ModMenu
		url "https://maven.terraformersmc.com/"
	}
	maven {  // Jade
		url "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
    maven { // owo-lib
        url 'https://maven.wispforest.io' }
    maven { // Modonomicon
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }
    maven { // JEI
        url "https://maven.blamejared.com/"
    }
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.3:${parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    modImplementation "com.klikli_dev:modonomicon-${minecraft_version}-fabric:${modonomicon_version}"

    modCompileOnly "com.klikli_dev:modonomicon-${minecraft_version}-common:${modonomicon_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
	modCompileOnly "maven.modrinth:jade:${jade_version}"

	modLocalRuntime "com.terraformersmc:modmenu:${modmenu_version}"
	modLocalRuntime "maven.modrinth:lazydfu:${lazydfu_version}"

	if(project.runtime_tooltip_mod == "jade") {
		modLocalRuntime "maven.modrinth:jade:${jade_version}"
	}

	if(project.runtime_itemlist_mod == "rei") {
        modLocalRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

spotless {
	java {
		target "src/*/java/fusarft/**/*.java"

		endWithNewline()
		indentWithTabs()
		removeUnusedImports()
		palantirJavaFormat()
	}

	kotlin {
		target "src/*/kotlin/fusarft/**/*.kt"

		endWithNewline()
		indentWithTabs()
		ktlint()
	}

	json {
		target "src/*/resources/**/*.json"

		endWithNewline()
		indentWithSpaces()
		prettier().config(["parser": "json"])
	}
}
